# Configuration for overlay programs (overlays located below main program)

# The overlay files don't include the 4 byte DOS 3.3 header so use AppleCommander like this:
# java -jar ac.jar -cc65 mydisk.dsk myprog   bin < myprog
# java -jar ac.jar -p    mydisk.dsk myprog.1 bin < myprog.1
# java -jar ac.jar -p    mydisk.dsk myprog.2 bin < myprog.2
# java -jar ac.jar -p    mydisk.dsk myprog.3 bin < myprog.3
# ...

FEATURES {
    STARTADDRESS: default = $0803;
}
SYMBOLS {
    __EXEHDR__:      type = import;
    __HIMEM__:       type = weak, value = $9600; # Presumed RAM end
    __LCADDR__:      type = weak, value = $D400; # Behind quit code
    __LCSIZE__:      type = weak, value = $0C00; # Rest of bank two
    __STACKSIZE__:   type = weak, value = $0800; # 2k stack
    __OVERLAYSIZE__: type = weak, value = $1000; # 4k overlay
    __LOADADDR__:    type = weak, value = __STARTUP_RUN__;
    __LOADSIZE__:    type = weak, value = __ZPSAVE_RUN__ - __STARTUP_RUN__ +
                                          __MOVE_LAST__  - __MOVE_START__;
}
MEMORY {
    ZP:                define = yes, start = $0080,                size = $001A;
    HEADER: file = %O,               start = $0000,                size = $0004;
    RAM:    file = %O,               start = %S + __OVERLAYSIZE__, size = __HIMEM__ - __STACKSIZE__ - __OVERLAYSIZE__ - %S;
    MOVE:   file = %O, define = yes, start = $0000,                size = $FFFF;
    LC:                define = yes, start = __LCADDR__,           size = __LCSIZE__;
    OVL1:   file = "%O.1",           start = %S,                   size = __OVERLAYSIZE__;
    OVL2:   file = "%O.2",           start = %S,                   size = __OVERLAYSIZE__;
    OVL3:   file = "%O.3",           start = %S,                   size = __OVERLAYSIZE__;
    OVL4:   file = "%O.4",           start = %S,                   size = __OVERLAYSIZE__;
    OVL5:   file = "%O.5",           start = %S,                   size = __OVERLAYSIZE__;
    OVL6:   file = "%O.6",           start = %S,                   size = __OVERLAYSIZE__;
    OVL7:   file = "%O.7",           start = %S,                   size = __OVERLAYSIZE__;
    OVL8:   file = "%O.8",           start = %S,                   size = __OVERLAYSIZE__;
    OVL9:   file = "%O.9",           start = %S,                   size = __OVERLAYSIZE__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,              type = zp;
    EXEHDR:   load = HEADER,          type = ro;
    STARTUP:  load = RAM,             type = ro,  define = yes;
    LOWCODE:  load = RAM,             type = ro,                optional = yes;
    CODE:     load = RAM,             type = ro;
    RODATA:   load = RAM,             type = ro;
    DATA:     load = RAM,             type = rw;
    ZPSAVE:   load = RAM,             type = bss, define = yes;
    BSS:      load = RAM,             type = bss, define = yes;
    INIT:     load = MOVE, run = RAM, type = ro,  define = yes, optional = yes;
    LC:       load = MOVE, run = LC,  type = ro,                optional = yes;
    OVERLAY1: load = OVL1,            type = ro,  define = yes, optional = yes;
    OVERLAY2: load = OVL2,            type = ro,  define = yes, optional = yes;
    OVERLAY3: load = OVL3,            type = ro,  define = yes, optional = yes;
    OVERLAY4: load = OVL4,            type = ro,  define = yes, optional = yes;
    OVERLAY5: load = OVL5,            type = ro,  define = yes, optional = yes;
    OVERLAY6: load = OVL6,            type = ro,  define = yes, optional = yes;
    OVERLAY7: load = OVL7,            type = ro,  define = yes, optional = yes;
    OVERLAY8: load = OVL8,            type = ro,  define = yes, optional = yes;
    OVERLAY9: load = OVL9,            type = ro,  define = yes, optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
