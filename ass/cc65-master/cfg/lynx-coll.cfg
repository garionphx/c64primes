SYMBOLS {
    __STACKSIZE__:        type = weak, value = $0800; # 2k stack
    __STARTOFDIRECTORY__: type = weak, value = $00CB; # start just after loader
    __BLOCKSIZE__:        type = weak, value = $0400; # cart block size
    __EXEHDR__:           type = import;
    __BOOTLDR__:          type = import;
    __DEFDIR__:           type = import;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000, size = $0100;
    HEADER: file = %O,               start = $0000, size = $0040;
    BOOT:   file = %O,               start = $0200, size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0000, size = 8;
    RAM:    file = %O, define = yes, start = $0200, size = $9E58 - __STACKSIZE__;
}
SEGMENTS {
    EXEHDR:    load = HEADER, type = ro;
    BOOTLDR:   load = BOOT,   type = ro;
    DIRECTORY: load = DIR,    type = ro;
    STARTUP:   load = RAM,    type = ro,  define = yes;
    LOWCODE:   load = RAM,    type = ro,  define = yes, optional = yes;
    INIT:      load = RAM,    type = ro,  define = yes, optional = yes;
    CODE:      load = RAM,    type = ro,  define = yes;
    RODATA:    load = RAM,    type = ro,  define = yes;
    DATA:      load = RAM,    type = rw,  define = yes;
    BSS:       load = RAM,    type = bss, define = yes;
    ZEROPAGE:  load = ZP,     type = zp;
    EXTZP:     load = ZP,     type = zp,                optional = yes;
    APPZP:     load = ZP,     type = zp,                optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
